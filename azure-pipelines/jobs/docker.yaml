jobs:
- job: BuildAndScan
  displayName: Build and Scan
  steps:
  - template: ../steps/debug-vars.yaml

  - task: DockerCompose@0
    displayName: Build services
    inputs:
      action: Buils services
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Visual Studio Premium avec MSDN (875bb2e2-ee51-4775-9138-5395a9a1ff92)'
      azureContainerRegistry: 'hasdrubal'
      dockerComposeFile: docker-compose.yml
      projectName: $(Build.Repository.Name)
      includeSourceTags: true
      includeLatestTag: true

- job: DockerPush
  displayName: Push
  dependsOn: BuildAndScan
  steps:
  - template: ../steps/debug-vars.yaml

  - template: ../steps/append-sha.yaml

  - task: DockerCompose@0
    displayName: Push services
    inputs:
      action: Push services
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Visual Studio Premium avec MSDN (875bb2e2-ee51-4775-9138-5395a9a1ff92)'
      azureContainerRegistry: 'hasdrubal'
      dockerComposeFile: docker-compose.yml
      projectName: $(Build.Repository.Name)
      includeSourceTags: true
      includeLatestTag: true

  - task: DockerCompose@0
    displayName: Lock services
    condition: eq(variables.isTag, 'True')
    inputs:
      action: Lock services
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Visual Studio Premium avec MSDN (875bb2e2-ee51-4775-9138-5395a9a1ff92)'
      azureContainerRegistry: 'hasdrubal'
      dockerComposeFile: docker-compose.yml
      projectName: $(Build.Repository.Name)
      qualifyImageNames: true
      outputDockerComposeFile: $(Build.StagingDirectory)/docker-compose.yml